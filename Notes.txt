Big O is a way to categorize your algorithm time or memory requirement based on input it will not tell you how many CPU cycles it takes.

    ("Meant to generalize the growth of algorithm")

O of n means grows linearly

Big O said differently
As your input grows, how fast does your computation or memory grow

important concepts

1. growth is respect to the input
2. always drop constants
3. Worst case is usually te way we measure

O of N is faster N^2

O(1) is instant pretty much

( O(sqrt(n)) is different)

First data structure

Arrays

const a = []
not an array lol git gud kid

Array
[] contiguous memory space
un-breaking memory space 

When you insert something into an array index,
it doesn't insert it (it overwrites it )

You don't get to grow your array into more memory

a + width * offset

What is the big O of getting a value out of an array?

O does not grow with input at all

You have to specify a size in an array as part of it's allocation
but you can re-allocate the array to another array by making a new array

Linear search & Kata Setup

"It's good practice to get into is being able to visualize the problem, discuss it with boxes and arrows, and then program it."  "It  a core competency that will follow you for the rest of your life"


Search --------------------
Easiest form of search is a linear search.